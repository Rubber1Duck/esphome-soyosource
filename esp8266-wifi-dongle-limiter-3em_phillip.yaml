substitutions:
  name: L1
  device_description: "Monitor and control the Soyosource using the OEM WiFi dongle"
  external_components_source: github://syssi/esphome-soyosource-gtn-virtual-meter@main
  tx_pin_rs485: GPIO5
  rx_pin_rs485: GPIO14
  shelly_3em_url: "http://192.168.178.45/status/"

esphome:
  name: ${name}
  comment: ${device_description}
  project:
    name: "syssi.esphome-soyosource-gtn-virtual-meter"
    version: 2.1.0

esp8266:
  board: d1_mini

external_components:
  - source: ${external_components_source}
    refresh: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  local: true

ota:

logger:
  baud_rate: 0
  level: DEBUG

uart:
  - id: uart_0
    baud_rate: 9600
    tx_pin: GPIO1
    rx_pin: GPIO3
  - id: uart_1
    baud_rate: 4800
    tx_pin: ${tx_pin_rs485}
    rx_pin: ${rx_pin_rs485}

soyosource_modbus:
  - id: modbus0
    uart_id: uart_1
    # flow_control_pin: GPIO12

    # Optional settings
    #
    # The name is used as prefix for some log messages and should
    # help to distinguish between different instances/devices
    name: L1

soyosource_virtual_meter:
  - id: virtualmeter0
    soyosource_modbus_id: modbus0

    # The state of this sensor (instantaneous power in watt) is used as source
    power_id: powermeter0

    # Optional settings
    power_sensor_inactivity_timeout: 20s
    power_demand_calculation: NEGATIVE_MEASUREMENTS_REQUIRED
    min_power_demand: 0
    max_power_demand: 900
    zero_output_on_min_power_demand: true
    # Split/distribute the power demand if you have multiple inverters attached to the same RS485 bus
    power_demand_divider: 1
    # A positive buffer value (10) tries to avoid exporting power to the grid (demand - 10 watts)
    # A negative buffer value (-10) exports power to the grid (demand + 10 watts)
    buffer: 10
    # The operation_status_id sensor is expected here. Passing the operation_status won't work
    # The state is used to suspend the limiter if the operation status of the inverter isn't 0x0 (normal)
    operation_status_id: operation_status_id0

    # The update interval is important and defaults to 3 seconds. If the demand is sent too frequently
    # or rarely the interverter stops. TODO: Identify and validate the lower and upper update limit
    update_interval: 3s

soyosource_display:
  - id: display0
    uart_id: uart_0
    protocol_version: SOYOSOURCE_WIFI_VERSION
    update_interval: 5s

binary_sensor:
  - platform: soyosource_display
    fan_running:
      name: "${name} fan running"
    limiter_connected:
      name: "${name} limiter connected"

button:
  - platform: soyosource_display
    restart:
      name: "${name} restart"

number:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    buffer:
      name: "${name} buffer"
      initial_value: 10
      restore_value: true
      mode: box
    manual_power_demand:
      name: "${name} manual power demand"
      max_value: 900
      mode: box
    max_power_demand:
      name: "${name}max power demand"
      initial_value: 600
      max_value: 900
      restore_value: true
      mode: box
    power_demand_divider:
      name: "${name} power demand divider"
      initial_value: 1
      restore_value: true
      mode: box

  - platform: soyosource_display
    start_voltage:
      name: "${name} start voltage"
    shutdown_voltage:
      name: "${name} shutdown voltage"
    # Maximum output power in limiter mode / Output power in constant power mode
    output_power_limit:
      name: "${name} output power limit"
    start_delay:
      name: "${name} start delay"

select:
  - platform: soyosource_display
    operation_mode:
      name: "${name} operation mode"
      optionsmap:
        1: "PV"
        2: "Battery Constant Power"
        17: "PV Limit"
        18: "Battery Limit"

sensor:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    power_demand:
      name: "${name} power demand"

  - platform: soyosource_display
    error_bitmask:
      name: "${name} error bitmask"
    operation_mode_id:
      name: "${name} operation mode id"
    operation_status_id:
      name: "${name} operation status id"
      id: operation_status_id0
    battery_voltage:
      name: "${name} battery voltage"
    battery_current:
      name: "${name} battery current"
    battery_power:
      name: "${name} battery power"
      id: dc_power
    ac_voltage:
      name: "${name} ac voltage"
    ac_frequency:
      name: "${name} ac frequency"
    temperature:
      name: "${name} temperature"
    total_energy:
      name: "${name} total energy"
    output_power:
      name: "${name} output power"

  - platform: template
    id: powermeter0
    name: "${name} Instantaneous Power"
    unit_of_measurement: W
    device_class: "power"
    accuracy_decimals: 2
    update_interval: never

#  - platform: copy
#    id: ac_power
#    source_id: dc_power
#    name: "${name} ac power (~ calculated)"
#    accuracy_decimals: 0
#    filters:
#      - calibrate_linear:
#         method: least_squares
#         datapoints:
#          # Map 0.0 (from sensor) to 1.0 (true value)
#          - 0.1 -> 0
#          - 31 -> 24
#          - 113 -> 96
#          - 247 -> 226

# tasmota & Shelly 3em
http_request:
  id: http_request0
  useragent: esphome/device
  timeout: 1000ms

interval:
  - interval: 1100ms
    then:
      - http_request.get:
          # shelly 3em
          url: ${shelly_3em_url}
          headers:
            Content-Type: application/json
          verify_ssl: false
          on_response:
            then:
              # shelly 3em
              - lambda: |-
                  std::string response_data = id(http_request0).get_string();
                  if(!response_data.empty()) {
                    json::parse_json(response_data, [](JsonObject root) {
                      id(powermeter0).publish_state(root["total_power"]);
                    });
                  }

switch:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    manual_mode:
      name: "${name} manual mode"
      restore_mode: RESTORE_DEFAULT_ON
    emergency_power_off:
      name: "${name} emergency power off"
      restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    operation_mode:
      name: "${name} limiter operation mode"

  - platform: soyosource_display
    errors:
      name: "${name} errors"
    operation_mode:
      name: "${name} operation mode"
    operation_status:
      name: "${name} operation status"
