substitutions:
  name: soyosource-gtn-virtual-meter
  device_description: "Control the power output of a Soyosource GTN on demand via RS485"
  external_components_source: github://syssi/esphome-soyosource-gtn-virtual-meter@main
  tx_pin: GPIO1
  rx_pin: GPIO3
  tasmota_status_url: "http://192.168.178.68/cm?user=admin&password=hb9070&cmnd=status+10"

esphome:
  name: ${name}
  comment: ${device_description}
  project:
    name: "syssi.esphome-soyosource-gtn-virtual-meter"
    version: 2.1.0

esp8266:
  board: d1_mini

external_components:
  - source: ${external_components_source}
    refresh: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

ota:

captive_portal:

web_server:
  local: true

logger:
  baud_rate: 0
  level: ERROR

uart:
  - id: uart_0
    baud_rate: 4800
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}

soyosource_modbus:
  - id: modbus0
    uart_id: uart_0
    # flow_control_pin: GPIO12

    # Optional settings
    #
    # The name is used as prefix for some log messages and should
    # help to distinguish between different instances/devices
    name: firstfloor_inverter

soyosource_virtual_meter:
  - id: virtualmeter0
    soyosource_modbus_id: modbus0

    # The state of this sensor (instantaneous power in watt) is used as source
    power_id: powermeter0

    # Optional settings
    power_sensor_inactivity_timeout: 20s
    power_demand_calculation: NEGATIVE_MEASUREMENTS_REQUIRED
    min_power_demand: 0
    max_power_demand: 900
    zero_output_on_min_power_demand: true
    # Split/distribute the power demand if you have multiple inverters attached to the same RS485 bus
    power_demand_divider: 1
    # A positive buffer value (10) tries to avoid exporting power to the grid (demand - 10 watts)
    # A negative buffer value (-10) exports power to the grid (demand + 10 watts)
    buffer: 10

    # The update interval is important and defaults to 3 seconds. If the demand is sent too frequently
    # or rarely the interverter stops. TODO: Identify and validate the lower and upper update limit
    update_interval: 3s

number:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    buffer:
      name: "${name} buffer"
      initial_value: 10
      restore_value: true
    manual_power_demand:
      name: "${name} manual power demand"
      max_value: 900
    max_power_demand:
      name: "${name} max power demand"
      initial_value: 600
      max_value: 900
      restore_value: true
    power_demand_divider:
      name: "${name} power demand divider"
      initial_value: 1
      restore_value: true

http_request:
  id: http_request0
  useragent: esphome/device
  timeout: 1000ms

sensor:
  - platform: template
    id: powermeter0
    name: "Instantaneous Power"
    unit_of_measurement: W
    device_class: "power"
    accuracy_decimals: 2
    update_interval: never

interval:
  - interval: 1100ms
    then:
      - http_request.get:
          url: ${tasmota_status_url}
          headers:
            Content-Type: application/json
          verify_ssl: false
          on_response:
            then:
              - lambda: |-
                  std::string response_data = id(http_request0).get_string();
                  if(!response_data.empty()) {
                    json::parse_json(response_data, [](JsonObject root) {
                      id(powermeter0).publish_state(root["StatusSNS"]["MT681"]["Power_cur"]);
                    });
                  }

switch:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    manual_mode:
      name: "${name} manual mode"
      restore_mode: RESTORE_DEFAULT_ON
    emergency_power_off:
      name: "${name} emergency power off"
      restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    operation_mode:
      name: "${name} limiter operation mode"
